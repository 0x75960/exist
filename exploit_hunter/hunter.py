#!/usr/bin/env python
# -*- coding: utf-8 -*-

import slackwrapper

import sys
import os
import random
from datetime import datetime, timedelta
from time import sleep
import django
import configparser
import argparse
import json
from requests_oauthlib import OAuth1Session
import pymysql
pymysql.install_as_MySQLdb()

version = '%(prog)s 20171116'
conffile = os.path.dirname(__file__) + "/exploit.conf"
conf = configparser.SafeConfigParser()
conf.read(conffile)

## Django Setup
sys.path.append(conf.get('insertdb', 'syspath'))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'intelligence.settings')
django.setup()
from exploit.models import Exploit
from exploit_hunter.models import Hunt
from django.db import IntegrityError
from django.db.models import Q
from django.utils import timezone

## Logger Setup
from logging import getLogger, StreamHandler, FileHandler, DEBUG, Formatter
logfilename = conf.get('hunter', 'logdir') + "/hunter.log"
logger = getLogger(__name__)
#handler_stream = StreamHandler()
#handler_stream.setFormatter(logging.Formatter("%(asctime)s %(levelname)8s %(message)s"))
handler_file = FileHandler(filename=logfilename)
handler_file.setFormatter(Formatter("%(asctime)s %(levelname)8s %(message)s"))
logger.setLevel(DEBUG)
#logger.addHandler(handler_stream)
logger.addHandler(handler_file)
logger.propagate = False

def argParse():
    parser = argparse.ArgumentParser(description=
            '''This is Exploit Hunter script
            ''',
            formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument('hunt_id', type=int, help='Hunt ID')
    parser.add_argument('notice', type=str, default='False', help='slack notice')
    parser.add_argument('-t', '--track', action='store', default='', help='track keyword')
    parser.add_argument('-v', '--version', action='version', version=version)
    args = parser.parse_args()
    return args

def checkupdate(hunt_name, track):
    if track is not None:
        exs = Exploit.objects.filter(Q(title__icontains=track)|Q(description__icontains=track)|Q(text__icontains=track)).order_by('-datetime')
    now = timezone.now()
    for ex in exs:
        if (now - timedelta(days=1)) < ex.datetime:
            print(hunt_name, ex.datetime)
            postSlack(hunt_name, ex)
            logger.info("%s %s %s", hunt_name, ex.datetime, ex.title)
    return

#def saveResponse(res, hunt_id):
#    hunt = Hunt(id=hunt_id)
#    hunt_name = Hunt.objects.get(id=hunt_id).name
#    for line_json in res.iter_lines(chunk_size=64):
#        try:
#            line = json.loads(line_json.decode('utf-8'))
#        except json.JSONDecodeError as e:
#            logger.debug("%s 再取得: %s", hunt_id, e)
#            continue
#        except Exception as e:
#            logger.debug(e)
#            continue
#        logger.info("%s %s get tweet", hunt_id, line["id"])
#        try:
#            query = tweet(
#                id = line["id"],
#                datetime = datetime.strptime(line["created_at"], "%a %b %d %H:%M:%S +0000 %Y").replace(tzinfo=timezone.utc),
#                user = line["user"]["name"],
#                screen_name = line["user"]["screen_name"],
#                text = line["text"],
#                hunt_id = hunt
#            )
#        except Exception as e:
#            logger.warn("%s: %s" % (e, line))
#        #printQuery(query)
#        if saveQuery(query, line):
#            if notice == 'True':
#                postSlack(hunt_name, query)

def postSlack(channel, query):
    channel = "eh-" + channel
    datetime_jst = query.datetime + timedelta(hours=9)
    message = "===============\n{datetime}\n{title}\n{referrer}".format(
        datetime = datetime_jst.strftime("%Y/%m/%d %H:%M:%S"),
        title = query.title,
        referrer = query.referrer,
    )
    slack = slackwrapper.SlackWrapper()
    slack.post(channel, message)
    return

def createChannel(channel):
    channel = "eh-" + channel
    slack = slackwrapper.SlackWrapper()
    slack.createChannel(channel)
    logger.info("Create Channel %s", channel)
    return

#def printResponse(res):
#    for line in res.iter_lines(chunk_size=64):
#        try:
#            tweet = json.loads(line.decode('utf-8'))
#            print("=========================")
#            print(tweet["id"])
#            print(("%s @%s") % (tweet["user"]["name"], tweet["user"]["screen_name"]))
#            print(tweet["created_at"])
#            print(tweet["text"])
#        except json.JSONDecodeError as e:
#            print('再取得')
#            continue
#        except Exception as e:
#            print(e)
#            continue

#def saveQuery(q, line):
#    try:
#        q.save(force_insert=True)
#        return 1
#    except IntegrityError:
#        return 0
#    except Exception as e:
#        logger.warn(e, line)
#        return 0

#def printQuery(q):
#    print("============")
#    print(q.id)
#    print(q.user)
#    print(q.screen_name)
#    print(q.datetime)
#    print(q.text)

if __name__ == "__main__":
    hunt_id = argParse().hunt_id
    notice = argParse().notice
    if notice == 'True':
        hunt_name = Hunt.objects.get(id=hunt_id).name
        createChannel(hunt_name)
        while True:
            checkupdate(hunt_name, argParse().track)
            sleep(1440)
    #saveResponse(res, hunt_id)

