from django.http import HttpResponse, HttpResponseRedirect
from django.shortcuts import get_object_or_404, render, redirect
from django.views.generic import ListView, DetailView
from pure_pagination.mixins import PaginationMixin
from django.db.models import Q, Count
from .models import Hunt
from exploit.models import Exploit
from .forms import HuntForm
import csv
from io import StringIO, BytesIO
from codecs import BOM_UTF8
from pytz import timezone
from django.http import JsonResponse
from urllib.parse import urlparse
from http.client import HTTPConnection

class IndexView(PaginationMixin, ListView):
    template_name = 'exploit_hunter/index.html'
    context_object_name = 'hts'
    paginate_by = 30

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        return context

    def get_queryset(self, request):
        query = Hunt.objects.order_by('id')
        #query = query.annotate(count=Count('Exploit'))
        return query

    def get(self, request):
        self.object_list = self.get_queryset(request)
        context = self.get_context_data()
        return render(request, 'exploit_hunter/index.html', context)

class ExploitsView(PaginationMixin, ListView):
    template_name = 'exploit_hunter/exploits.html'
    context_object_name = 'exs'
    paginate_by = 30

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        return context

    def get_queryset(self, request, pk):
        keyword = Hunt.objects.get(id=pk).track
        query = Exploit.objects.filter(Q(text__icontains=keyword)).order_by('-datetime')
        return query

    def get(self, request, pk):
        self.object_list = self.get_queryset(request, pk)
        context = self.get_context_data()
        return render(request, 'exploit_hunter/exploits.html', context)

def hunt_add(request):
    hunt = Hunt()
    if request.method == 'POST':
        form = HuntForm(request.POST, instance=hunt)
        if form.is_valid():
            hunt = form.save(commit=False)
            hunt.save()
            hunt.start()
            return redirect('exploit_hunter:index')
    else:
        form = HuntForm(instance=hunt)
    return render(request, 'exploit_hunter/hunt_edit.html', dict(form=form))

def hunt_del(request, pk):
    hunt = get_object_or_404(Hunt, id=pk)
    hunt.stop()
    hunt.delete()
    #cmd = "ps aux|grep \"hunter.py " + pk + " \"|grep -v grep |awk '{print \"kill -9\", $2}'|sh"
    ##print(cmd)
    #subprocess.Popen(cmd, shell=True)
    return redirect('exploit_hunter:index')

#def hunt_export(request, pk):
#    stream = StringIO()
#    writer = csv.writer(stream)
#    header = ['#datetime', 'user', 'screen_name', 'text']
#    writer.writerow(header)
#    for ex in Exploit.objects.filter(hunt_id=Hunt(id=pk)).order_by('datetime'):
#        dt = ex.datetime.astimezone(timezone('Asia/Tokyo'))
#        row = [dt, ex.user, ex.screen_name, ex.text]
#        writer.writerow(row)
#    b_stream = BytesIO(BOM_UTF8 + stream.getvalue().encode('utf8'))
#    response = HttpResponse(b_stream.getvalue(), content_type="text/csv")
#    response["Content-Disposition"] = "filename=hunter%s.csv" % pk
#    return response

def hunt_switch_notice(request, pk):
    hunt = get_object_or_404(Hunt, id=pk)
    hunt.stop()
    if hunt.notice == True:
        hunt.setNoticeFalse()
    else:
        hunt.setNoticeTrue()
    hunt.start()
    return redirect('exploit_hunter:index')

def hunt_switch_enable(request, pk):
    hunt = get_object_or_404(Hunt, id=pk)
    if hunt.enable == True:
        hunt.setDisable()
        hunt.stop()
    else:
        hunt.setEnable()
        hunt.start()
    return redirect('exploit_hunter:index')

#def expand_url(request):
#    url = request.GET.get('url', None)
#    exurl = expand(url)
#    while exurl != url:
#        url = exurl
#        exurl = expand(url)
#    return JsonResponse({'url': exurl})

#def expand(url):
#    o = urlparse(url)
#    con = HTTPConnection(o.netloc)
#    con.request('HEAD', o.path)
#    res = con.getresponse()
#    if res.getheader('location') == None:
#        return url
#    return res.getheader('location')

