#!/usr/bin/env python
# -*- coding: utf-8 -*-

import sys
import os
from datetime import datetime, timezone
import django
import pandas as pd
import xml.etree.ElementTree as ET
import hashlib
import requests
import configparser
from time import sleep
from io import StringIO
import pymysql
pymysql.install_as_MySQLdb()

conffile = os.path.join(os.path.dirname(__file__), "conf/insert2db.conf")
conf = configparser.SafeConfigParser()
conf.read(conffile)

## Django Setup
sys.path.append(conf.get('exist', 'syspath'))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'intelligence.settings')
django.setup()
from exploit.models import Exploit
import django.utils.timezone as tzone
from django.db import IntegrityError

## Logger Setup
from logging import getLogger, StreamHandler, FileHandler, DEBUG, Formatter
logfilename = os.path.join(os.path.dirname(__file__), 'logs/insert2db.log')
logger = getLogger(__name__)
handler_file = FileHandler(filename=logfilename)
handler_file.setFormatter(Formatter("%(asctime)s %(levelname)8s %(message)s"))
logger.setLevel(DEBUG)
logger.addHandler(handler_file)
logger.propagate = False

URLs = {
    'cx' : 'https://cxsecurity.com/wlb/rss/exploit/',
    'exdb' : 'https://www.exploit-db.com/rss.xml',
}

Files = {
    'cx' : 'cx/index.html',
    'exdb' : 'exdb/rss.xml',
}

DataDir = os.path.dirname(__file__) + '/data/'

def printQuery(q):
    print("==========")
    print(q.id)
    print(q.title)
    print(q.description)
    print(q.datetime)
    print(q.referrer)
    #print(q.text)
    print(q.get_source_display())

def saveQuery(q, line):
    try:
        q.save(force_insert=True)
        return 1
    except IntegrityError:
        return 0
    except Exception as e:
        logger.error("%s: %s", e, line)
        return 0

def fetchCXText(guid):
    filepath = DataDir + "cx/data/" + guid
    if os.path.exists(filepath):
        return open(filepath).read().split("</HEAD><BODY><PRE>")[1].split("</PRE></BODY></HTML>")[0]
    url = "https://cxsecurity.com/ascii/{id}".format(id=guid)
    try:
        res = requests.get(url)
    except Exception as e:
        logger.error(e)
    if not res.text == '':
        open(filepath, 'w').write(res.text)
    text = open(filepath).read().split("</HEAD><BODY><PRE>")[1].split("</PRE></BODY></HTML>")[0]
    return text

def fetchExdbText(guid):
    filepath = DataDir + "exdb/data/" + guid
    if os.path.exists(filepath):
        return open(filepath).read()
    url = "https://www.exploit-db.com/raw/{id}".format(id=guid)
    headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64; Trident/7.0; rv:11.0) like Gecko'}
    try:
        res = requests.get(url, headers=headers)
    except Exception as e:
        logger.error(e)
    if not res.text == '':
        open(filepath, 'w').write(res.text)
    text = open(filepath).read()
    sleep(5)
    return text

def parseCX(src_name, src_id):
    logger.info("%s start", src_name)
    header = [
        'title',
        'link',
        'guid',
        'lastBuildDate',
        'dc:creator',
        'description',
        'pubDate',
    ]

    try:
        res = requests.get(URLs[src_name])
    except Exception as e:
        logger.error(e)
    if not res.text == '':
        open(DataDir+Files[src_name], 'w').write(res.text)
    xml_data = open(DataDir+Files[src_name]).read()
    root = ET.XML(xml_data)
    all_records = []
    for child in root[0]:
        if child.tag == 'item':
            record = {}
            for subchild in child:
                record[subchild.tag] = subchild.text
            all_records.append(record)
    df = pd.DataFrame(all_records)

    if df.empty:
        return

    cnt = 0
    for i, v in df.iterrows():
        line = str(src_id) + ","
        line += str(v.values)
        md5 = hashlib.md5(line.encode('utf-8')).hexdigest()
        try:
            query = Exploit(
                id = md5,
                title = v.title,
                description = v.description[:254],
                referrer = v.link,
                datetime = datetime.strptime(v.pubDate, '%a, %d %b %Y %H:%M:%S %z'),
                text = fetchCXText(v.guid),
                source = src_id,
            )
        except Exception as e:
            logger.error("%s: %s", e, line)
        if saveQuery(query, line):
            cnt += 1
    logger.info("%s %d inserted", src_name, cnt)

def parseExdb(src_name, src_id):
    logger.info("%s start", src_name)
    header = [
        'title',
        'link',
        'description',
        'type',
        'pubDate',
        'guid',
    ]

    headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64; Trident/7.0; rv:11.0) like Gecko'}
    try:
        res = requests.get(URLs[src_name], headers=headers)
    except Exception as e:
        logger.error(e)
    if not res.text == '':
        open(DataDir+Files[src_name], 'w').write(res.text)
    xml_data = open(DataDir+Files[src_name]).read()
    root = ET.XML(xml_data)
    all_records = []
    for child in root[0]:
        if child.tag == 'item':
            record = {}
            for subchild in child:
                record[subchild.tag] = subchild.text
            all_records.append(record)
    df = pd.DataFrame(all_records)

    if df.empty:
        return

    cnt = 0
    for i, v in df.iterrows():
#        if v.type == 'papers':
#            continue
        guid = v.guid.split('/')[-2:-1][0]
        line = str(src_id) + ","
        line += str(v.values)
        md5 = hashlib.md5(line.encode('utf-8')).hexdigest()
        try:
            query = Exploit(
                id = md5,
                title = v.title,
                description = v.description,
                referrer = v.link[:-4],
                datetime = datetime.strptime(v.pubDate, '%a, %d %b %Y %H:%M:%S +0000').replace(tzinfo=timezone.utc),
                text = fetchExdbText(guid),
                source = src_id,
            )
        except Exception as e:
            logger.error("%s: %s", e, line)
        if saveQuery(query, line):
            cnt += 1
    logger.info("%s %d inserted", src_name, cnt)

if __name__ == '__main__':
    logger.info("%s start", __file__)

    parseCX("cx", 101)
    parseExdb("exdb", 111)

    logger.info("%s done", __file__)

